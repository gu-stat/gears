% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/error_measures.R
\name{error_measures}
\alias{error_measures}
\alias{measure_MSE}
\alias{measure_MAD}
\alias{measure_SMAPE}
\alias{measure_MASE}
\alias{measure_OWA}
\title{Functions to calculate the forecast errors.}
\usage{
error_measures(
  forecasts,
  outsample,
  insample = NULL,
  ts.frequency,
  forecast.horizon,
  alpha.level = 0.05,
  error.measure = NULL
)

measure_MSE(forecasts, outsample)

measure_MAD(forecasts, outsample)

measure_SMAPE(forecasts, outsample)

measure_MASE(forecasts, outsample, insample)

measure_OWA(
  forecasts,
  outsample,
  insample,
  forecast.horizon,
  alpha.level,
  ts.frequency
)
}
\arguments{
\item{forecasts}{A numeric vector with the point forecasts.}

\item{outsample}{A numeric vector with the test data set.}

\item{insample}{A numeric vector with the training data set.}

\item{ts.frequency}{The frequency of a ts object.}

\item{forecast.horizon}{A numeric value with the length of the forecast lead.}

\item{alpha.level}{A numeric value with the alpha level to be used in the
test to detect seasonality. Default is 0.05.}

\item{error.measure}{Error measure to be used when calculating the in-sample
prediction errors.}
}
\value{
A 5-object list with the numeric values of the forecast error for
    each one of the error measures.
}
\description{
\code{error_measures} returns the forecast errors for the following error
measures: MSE, MAD, sMAPE, MASE, and OWA.
}
\details{
These can be 'mse', 'mad', 'smape', 'mase', and 'owa' (see Details).
}
\section{Functions}{
\itemize{
\item \code{measure_MSE}: MSE - Mean Absolute Deviation

\item \code{measure_MAD}: MAD - Mean Absolute Deviation

\item \code{measure_SMAPE}: SMAPE - Symmetric Mean Absolute Percentage Error

\item \code{measure_MASE}: MASE - Mean Absolute Scaled Error

\item \code{measure_OWA}: OWA - Overall Weighted Average
}}

\examples{
# Using NAIVE2:
# Observations until the 100th will be in the insample (train) data set.
tmp.cut.at <- 100

tmp.forecast.horizon <- length(datasets::AirPassengers) - tmp.cut.at

tmp.orig.start <- stats::tsp(datasets::AirPassengers)[1]
tmp.orig.end   <- stats::tsp(datasets::AirPassengers)[2]
tmp.orig.freq  <- stats::tsp(datasets::AirPassengers)[3]


# Get train data (insample)

tmp.train.start <- tmp.orig.start
tmp.train.end   <- tmp.orig.start + ((tmp.cut.at - 1) * 1 / tmp.orig.freq)

tmp.train.data  <- stats::window(
  x         = datasets::AirPassengers,
  start     = tmp.train.start,
  end       = tmp.train.end,
  frequency = tmp.orig.freq
)

# Get test data (outsample)

tmp.test.start <- tmp.orig.start + (tmp.cut.at * 1 / tmp.orig.freq)
tmp.test.end   <- tmp.orig.end

tmp.test.data  <- stats::window(
  x         = datasets::AirPassengers,
  start     = tmp.test.start,
  end       = tmp.test.end,
  frequency = tmp.orig.freq
)

# Get Forecasts
tmp.forecasts <- gears::forecast_naive2(
  ts.data          = tmp.train.data,
  ts.frequency     = tmp.orig.freq,
  forecast.horizon = tmp.forecast.horizon,
  alpha.level      = 0.05
)

# Get error measures for the forecast
error_measures(
  forecasts          = tmp.forecasts,
  outsample          = tmp.test.data,
  insample           = tmp.train.data,
  ts.frequency       = tmp.orig.freq,
  forecast.horizon   = tmp.forecast.horizon,
  alpha.level        = 0.05,
  error.measure      = "mse"
)
}
